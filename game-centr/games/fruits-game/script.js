// –°–ø–∏—Å–æ–∫ —Ñ—Ä—É–∫—Ç–æ–≤: —Ö–æ—Ä–æ—à–∏–µ –∏ –ø–ª–æ—Ö–∏–µ
const FRUITS = [
  { src: "apple.png", type: "good" },
  { src: "banana.png", type: "good" },
  { src: "orange.png", type: "good" },
  { src: "bad-apple.png", type: "bad" },
  { src: "can.png", type: "bad" }
];

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let score = 0;
let lives = 3;
let gameActive = false;
let fruitInterval;
let speed = 2;
let currentLevel = 0;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const startScreen = document.getElementById("start-screen");
const gameScreen = document.getElementById("game-screen");
const endScreen = document.getElementById("end-screen");
const scoreElement = document.getElementById("score");
const finalScoreElement = document.getElementById("final-score");
const recordElement = document.getElementById("record");
const livesElement = document.getElementById("lives");
const levelDisplay = document.getElementById("level-display");
const gameArea = document.getElementById("game-area");
const startButton = document.getElementById("start-button");
const restartButton = document.getElementById("restart-button");
const soundToggle = document.getElementById("sound-toggle");

// –ó–≤—É–∫–∏
const popSound = document.getElementById("pop-sound");
const errorSound = document.getElementById("error-sound");
const levelUpSound = document.getElementById("level-up-sound");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–∞
let soundEnabled = true;
if (localStorage.getItem("soundEnabled") === "false") {
  soundEnabled = false;
}
soundToggle.textContent = soundEnabled ? "üîä" : "üîá";
if (!soundEnabled) {
  soundToggle.classList.add("muted");
}

// –†–µ–∫–æ—Ä–¥
let record = parseInt(localStorage.getItem("fruitGameRecord")) || 0;
recordElement.textContent = `–†–µ–∫–æ—Ä–¥: ${record}`;

// Telegram WebApp ‚Äî —Ä–∞—Å—à–∏—Ä—è–µ–º —ç–∫—Ä–∞–Ω
if (window.Telegram?.WebApp) {
  Telegram.WebApp.expand();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
startButton.addEventListener("click", startGame);
restartButton.addEventListener("click", startGame);

soundToggle.addEventListener("click", () => {
  soundEnabled = !soundEnabled;
  localStorage.setItem("soundEnabled", soundEnabled);

  soundToggle.textContent = soundEnabled ? "üîä" : "üîá";
  soundToggle.classList.toggle("muted");

  if (!soundEnabled) {
    popSound.pause(); popSound.currentTime = 0;
    errorSound.pause(); errorSound.currentTime = 0;
    levelUpSound.pause(); levelUpSound.currentTime = 0;
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function startGame() {
  score = 0;
  lives = 3;
  gameActive = true;
  speed = 2;
  currentLevel = 0; // —Å–±—Ä–æ—Å–∏–º
  scoreElement.textContent = `–û—á–∫–∏: ${score}`;
  updateLivesDisplay();
  gameArea.innerHTML = "";

  // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  updateDifficulty();

  startScreen.classList.add("hidden");
  gameScreen.classList.remove("hidden");
  endScreen.classList.add("hidden");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏–∑–µ–π
function updateLivesDisplay() {
  livesElement.textContent = "‚ù§Ô∏è".repeat(lives);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —Å—á—ë—Ç—É
function getDifficulty() {
  if (score < 10) return { badFruitChance: 0.2, spawnDelay: 1500, speed: 2.5, level: 1 };
  if (score < 25) return { badFruitChance: 0.25, spawnDelay: 1200, speed: 3, level: 2 };
  if (score < 50) return { badFruitChance: 0.3, spawnDelay: 900, speed: 3.5, level: 3 };
  if (score < 100) return { badFruitChance: 0.35, spawnDelay: 700, speed: 3.8, level: 4 };
  return { badFruitChance: 0.5, spawnDelay: 500, speed: 4.5, level: 5 };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Å—á—ë—Ç–∞)
function updateDifficulty() {
  const difficulty = getDifficulty();

  if (difficulty.level > currentLevel) {
    currentLevel = difficulty.level;
    playLevelUpSound();
    // –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  levelDisplay.textContent = `LVL ${currentLevel}`;

  clearInterval(fruitInterval);
  fruitInterval = setInterval(spawnFruit, difficulty.spawnDelay);
  speed = difficulty.speed;

  const fill = Math.min((score / 150) * 100, 100);
  document.getElementById("intensity-fill").style.width = `${fill}%`;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞
function spawnFruit() {
  if (!gameActive) return;

  const fruit = document.createElement("div");
  fruit.classList.add("fruit");

  const difficulty = getDifficulty();
  const isBad = Math.random() < difficulty.badFruitChance;

  const availableFruits = isBad
    ? FRUITS.filter(f => f.type === "bad")
    : FRUITS.filter(f => f.type === "good");

  const randomFruit = availableFruits[Math.floor(Math.random() * availableFruits.length)];
  fruit.style.backgroundImage = `url('assets/${randomFruit.src}')`;
  fruit.dataset.type = randomFruit.type;

  // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
  const maxX = gameArea.clientWidth - 60;
  fruit.style.left = Math.random() * maxX + "px";
  fruit.style.top = "0px";

  gameArea.appendChild(fruit);

  // –î–≤–∏–∂–µ–Ω–∏–µ —Ñ—Ä—É–∫—Ç–∞ –≤–Ω–∏–∑
  let moveFruit;
  moveFruit = setInterval(() => {
    if (!gameActive) {
      clearInterval(moveFruit);
      return;
    }

    const currentTop = parseFloat(fruit.style.top);
    fruit.style.top = currentTop + speed + "px";

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç–∏–≥ –ª–∏ —Ñ—Ä—É–∫—Ç –Ω–∏–∑–∞ —ç–∫—Ä–∞–Ω–∞
    if (currentTop > gameArea.clientHeight) {
      if (randomFruit.type === "good") {
        lives--;
        updateLivesDisplay();
        playErrorSound();
        if (lives <= 0) {
          endGame();
        }
      }
      fruit.remove();
      clearInterval(moveFruit);
    }
  }, 50);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ—Ä—É–∫—Ç—É
  fruit.addEventListener("click", () => {
    if (!gameActive) return;

    fruit.classList.add("pop");
    setTimeout(() => {
      fruit.remove();
      clearInterval(moveFruit);
    }, 300);

    if (randomFruit.type === "good") {
      score++;
      scoreElement.textContent = `–û—á–∫–∏: ${score}`;
      playPopSound();
      createExplosion(fruit);
      updateDifficulty(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    } else if (randomFruit.type === "bad") {
      lives--;
      updateLivesDisplay();
      playErrorSound();
      if (lives <= 0) {
        endGame();
      }
    }
  });
}

// –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ (—á–∞—Å—Ç–∏—Ü—ã)
function createExplosion(fruit) {
  const rect = fruit.getBoundingClientRect();
  const x = rect.left + rect.width / 2;
  const y = rect.top + rect.height / 2;

  for (let i = 0; i < 5; i++) {
    const particle = document.createElement("div");
    particle.classList.add("particle");

    const angle = Math.random() * Math.PI * 2;
    const speed = 2 + Math.random() * 3;
    const vx = Math.cos(angle) * speed;
    const vy = Math.sin(angle) * speed;

    particle.style.left = `${x}px`;
    particle.style.top = `${y}px`;
    document.body.appendChild(particle);

    let px = x, py = y;
    const move = setInterval(() => {
      px += vx;
      py += vy;
      particle.style.left = `${px}px`;
      particle.style.top = `${py}px`;

      if (py > window.innerHeight || px < 0 || px > window.innerWidth) {
        particle.remove();
        clearInterval(move);
      }
    }, 16);

    setTimeout(() => {
      particle.remove();
      clearInterval(move);
    }, 500);
  }
}

// –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function showLevelUp(level) {
  const popup = document.getElementById("level-up-popup");
  const levelNumber = document.getElementById("level-number");
  levelNumber.textContent = level;
  popup.classList.add("show");

  setTimeout(() => {
    popup.classList.remove("show");
  }, 2000);
}

// –ó–≤—É–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–∫–ª—é—á—ë–Ω–Ω–æ—Å—Ç–∏)
function playPopSound() {
  if (soundEnabled) popSound.play().catch(() => {});
}

function playErrorSound() {
  if (soundEnabled) errorSound.play().catch(() => {});
}

function playLevelUpSound() {
  if (soundEnabled) levelUpSound.play().catch(() => {});
}

// –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
function endGame() {
  gameActive = false;
  clearInterval(fruitInterval);
  gameArea.innerHTML = "";

  finalScoreElement.textContent = `–¢—ã —Å–æ–±—Ä–∞–ª: ${score} —Ñ—Ä—É–∫—Ç–æ–≤`;
  if (score > record) {
    record = score;
    localStorage.setItem("fruitGameRecord", record);
    recordElement.textContent = `–†–µ–∫–æ—Ä–¥: ${record}`;
  }

  gameScreen.classList.add("hidden");
  endScreen.classList.remove("hidden");
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
shareButton.addEventListener("click", () => {
  const message = `–Ø —Å–æ–±—Ä–∞–ª ${score} —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –∏–≥—Ä–µ "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ñ—Ä—É–∫—Ç"! –ê —Ç—ã —Å–∫–æ–ª—å–∫–æ —Å–æ–±–µ—Ä—ë—à—å?`;
  if (window.Telegram?.WebApp) {
    Telegram.WebApp.sendData(message);
  } else {
    alert(message);
  }
});

